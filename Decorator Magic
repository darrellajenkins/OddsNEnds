print("You wish to run a function named <bingo>.")
print("But beforehand you want a wrapper and its gooey center to run first.\n")


def wrapper(function):
    print("\033[34m\033[1mI am the wrapper.\033[39m\033[0m")
    
    def gooey_center():
        print("\033[32m\033[1m\n\tI am the gooey center, inner function inside of the wrapper.")
        print("\tI run after the wrapper has been removed.\033[39m\033[0m")
        function()  # OKAY SINCE PRINT STMT IN BINGO BUT REALLY SHOULD SAY RETURN FUNCTION()...ALSO SEE NOTE BELOW
        
    return gooey_center
    

@wrapper
def bingo():
    print("\nI am the original <bingo> function. Now let us begin.")  # RIGHT NOW IT IS PRINTING BUT REALLY YOU SHOULD RETURN "TEXT"
    
    
bingo()    
print()

print("*" * 20)
print("An alternative is to assign the wrapper containing the base function to a variable.")
print("< Do not use a decorator on the base function in code. >")
print("Then you run the variable as a function. This produces the same result.\n")


def alternative_wrapper(function):
    print("\033[35m\033[1mI'm an old school wrapper.\033[39m\033[0m")

    def alt_gooey_center():
        print("\033[36m\033[1m\n\tI am the gooey center, inner function inside of the wrapper.")
        print("\tI run after the wrapper has been removed.\033[39m\033[0m")
        function()
        
    return alt_gooey_center


def bam():
    print("\nI am the original function. Now we can roll!")


b = alternative_wrapper(bam)
b()


import time
from functools import wraps

print()
def timer(func):
    def wrapper(*args, **kwargs):
        start = time.perf_counter_ns()
        result = func(*args, **kwargs)
        delta = time.perf_counter_ns() - start
        print(f'{func.__name__} took {delta:,.0f}ns')
        return result
    return wrapper

@timer
def factor(n):
    result = 1
    
    for r in range(2, n + 1):
        result *= r
    return result

print(factor(100))
print()


import time


"""Your code will return None because the wrap function inside the decorator doesn't return the value returned by the decorated function (numbers()),
unless you return the data in both the base and inner functions.  When you use a decorator, the decorated function's return value is essentially
lost unless you explicitly return it from the wrapper function.  See below example with required entries to obtain return data."""
current_time = time.time() 

def speed_calc_decorator(function):
    def wrap():
        start = time.perf_counter()
        result = function()  # To get the return you must save to a variable here.
        end = time.perf_counter()
        print(f"Total run time = {end - start}")
        return result  # Next you must return the variable here too.
    return wrap


@speed_calc_decorator
def numbers():
    count = []
    for i in range(1_000_000):
        count.append(i * i)
    return count  # Third - you must also return the data here.


print("Time: ")
c = numbers()
print(c)


def italic(func):
	def wrapper():
		return '<i>' + func() + '</i>'
	return wrapper

def strong(func):
	def wrapper():
		return '**' + func() + '**'
	return wrapper

@italic
@strong
def introduction():
	return 'This is a basic program'

print(introduction())

def seastorm(function):
    def wrapper():
        a = []
        b = ""
        for r in range(5, 0, -1):
            a.append(str(r))
        for item in a:
            b += (item + ' ...')
        return function() + "\n\t" + b  # Here we can change the order...countdown could be first
        # return b + "\n" + function()
    return wrapper

def volcano(function):
    print("\033[34m\033[1mThe volcano blew!\033[39m\033[0m")  # Sound could be used here as the opening ***
    def center():
        a = "\033[32m\033[1m\n\tJourney to the Center of the Earth.\033[39m\033[0m"
        return a + function() 
    return center


@seastorm
@volcano
def crater():
    return "...Time for a hike through the crater."

print(crater())

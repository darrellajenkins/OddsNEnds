# You can sort keys(), values(), or items() from a dictionary.
cartoon = {'Tom': 'Cat', 'Jerry': 'Mouse', 'Leo': 'Lion', 'Woody': 'Woodpecker'}
for key, value in cartoon.items():
	print(f"Introducing...{key} the {value}.")
print("\n")

charac = input("Which animal would you like to know the name of? ")
for key, value in cartoon.items():  # Obtain the key of an item if you know the value:
	if value == charac:
		print(key)
print()

print(sorted(cartoon))  # Prints only KEYS in alpha order as a list
for key in sorted(cartoon.keys()):  # Sorts by keys
	print(f"\033[31mNow introducing in alphabetical order - {key} the {cartoon[key]}")

for name, title in sorted(cartoon.items(), key=lambda item: item[1]):
	print(f"\033[35m{name} - {title}")

for value in sorted(cartoon.values()):  # Sorts by values but you can only access the values.
	print(f"\033[32m{value}")  # Prints only VALUES because you CANNOT ACCESS THE KEYS WITH THIS METHOD.
print("\n")

#  SORT A DICT BY VALUES INSTEAD OF KEYS AND ACCESS BOTH VALUE AND CORRESPONDING KEY SORTED BY VALUE.
newcartoon = {}
for key, value in cartoon.items():
	newcartoon[value] = key  # For each pair in orig dict add to new dict but REVERSE the key-value pair.
print(newcartoon)  # Printing verifies the dict is reversed, but it is not yet sorted.
for key, value in sorted(newcartoon.items()):
	print(f"\033[33m{key}: {value}", end="| ")
print("\nIntroducing in alphabetical order: ")
for key, value in sorted(newcartoon.items()):  # Now you can alpha sort and print by the new key which is the value you wanted to sort by in the first place.
	print(f"\033[32mOur famous {key}'s name is {value}!")
print()

# THERE MUST BE A BETTER WAY!
# YES! A MUCH EASIER WAY:
cartoon = {'Tom': 'Cat', 'Jerry': 'Mouse', 'Leo': 'Lion', 'Woody': 'Woodpecker'}
cartoon_dictcomp = {value:key for key, value in cartoon.items()}  # ** Likely the best way in most cases. aka: rd = {(y, x) for (x, y) in d.items()}
print((sorted(cartoon_dictcomp.items())))

we = {'fun': 10, 'sports': 3, 'chef': 9, 'zebra': 1, 'train': 7}
a = sorted(we.items(), key=lambda t: t[1])
print(a)
print()

desert = {'apple pie': 'amazing', 'christmas cake': 'extraordinary', 'fruit tart': 'divine', 'pear pie': 'stellar'}
for key, value in sorted(desert.items(), key=lambda item: item[1]):
	print(f'{key}: {value}')
print()

cake = {'fun': 10, 'sports': 3, 'chef': 9, 'zebra': 1, 'train': 7}
for key, value in sorted(cake.items(), key=lambda item: item[1]):
	print(f'{value} {key}')
print()
for key, value in sorted(cake.items(), key=lambda item: item[1]):
	print(f'{key} {value}')
print()

curd = {'lemon': 10, 'vanilla': 3, 'blackberry': 9, 'white chocolate': 8, 'raspberry': 7}
print(sorted((v, k) for (k, v) in curd.items()))
print()

sports = {'baseball': 'Cubs', 'basketball': 'Bulls', 'football': 'Bears', 'tennis': 'Ivan Lendl'}
print(dict(sorted((val, key) for (key, val) in sports.items())))
print()

# make a dict from two zipped lists
lngs = ['C#', 'C++', 'HTML/CSS', 'Java', 'JavaScript', 'Python', 'SQL']
names = ['Elisa', 'Ellen', 'Lindsay', 'Sandy', 'Steve', 'Todd', 'Tonia']

zipdictLangs = {x:y for (x,y) in zip(lngs, names)}
print(zipdictLangs)
